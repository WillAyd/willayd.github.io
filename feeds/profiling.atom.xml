<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Will Ayd - profiling</title><link href="https://willayd.com/" rel="alternate"></link><link href="https://willayd.com/feeds/profiling.atom.xml" rel="self"></link><id>https://willayd.com/</id><updated>2023-04-03T00:00:00-07:00</updated><entry><title>Profiling Python Extensions with callgrind</title><link href="https://willayd.com/profiling-python-extensions-with-callgrind.html" rel="alternate"></link><published>2023-04-03T00:00:00-07:00</published><updated>2023-04-03T00:00:00-07:00</updated><author><name>Will Ayd</name></author><id>tag:willayd.com,2023-04-03:/profiling-python-extensions-with-callgrind.html</id><summary type="html">&lt;p class="first last"&gt;It is common practice in the Python world to write C/C++ extensions to optimize performance, but what do you do when that is not enough? How could you find bottlenecks &lt;em&gt;within&lt;/em&gt; your extensions? Use callgrind of course!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;At some point in the development of a high performance Python library, you will likely find yourself writing C/C++ extensions (whether by hand or via &lt;a class="reference external" href="https://cython.org/"&gt;Cython&lt;/a&gt;). That alone may achieve the performance you desire, but in cases where you &lt;em&gt;still&lt;/em&gt; need more what do you do? The Python runtime won't be able to track the performance details of any lower-level extensions, so many of the great tools used for Python profiling are out of the question. Instead we need to opt for profiling tools that directly target C/C++ executables.&lt;/p&gt;
&lt;p&gt;There are many tools to help with this, but for this article we are going to use &lt;a class="reference external" href="https://valgrind.org/docs/manual/cl-manual.html"&gt;callgrind&lt;/a&gt;, which is part of the larger &lt;a class="reference external" href="https://valgrind.org/"&gt;Valgrind&lt;/a&gt; framework. As a profiling target we are going to pick the 1.5 release of the &lt;a class="reference external" href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt; library, where we are curious to know which parts of the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html"&gt;read_csv&lt;/a&gt; implementation may be a bottleneck.&lt;/p&gt;
&lt;div class="section" id="setting-up-our-environment-data"&gt;
&lt;h2 id="setting-up-our-environment-data"&gt;Setting up our environment / data&lt;/h2&gt;
&lt;p&gt;To simplify the setup I have created a Dockerfile custom-built for this article, which you can pull via &lt;tt class="docutils literal"&gt;docker pull &lt;span class="pre"&gt;willayd/blog-posts:pandas-callgrind&lt;/span&gt;&lt;/tt&gt;. If not using Docker you will need to &lt;a class="reference external" href="https://valgrind.org/docs/manual/manual-core.html#manual-core.install"&gt;install Valgrind&lt;/a&gt; alongside all of the pandas build requirements &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/version/1.5/development/contributing_environment.html"&gt;from the 1.5.x release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will also want to get a copy of the pandas 1.5 source code local to your computer. For this article we assume that source code will exist in a local directory named &lt;cite&gt;~/code/pandas-1.5&lt;/cite&gt;. We will also checkout a particular commit to prevent any future changes made to 1.5.x from rendering the solution in this article incompatible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;willayd@willayd:~$&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;~/code
willayd@willayd:~$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;--depth&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.5.x&lt;span class="w"&gt; &lt;/span&gt;https://github.com/pandas-dev/pandas.git&lt;span class="w"&gt; &lt;/span&gt;~/code/pandas-1.5
willayd@willayd:~$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/code/pandas-1.5
willayd@willayd:~$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;778ab82
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For data we can use the US Census &lt;a class="reference external" href="https://www.census.gov/data/datasets/2020/econ/susb/2020-susb.html"&gt;2020 SUSB Annual Datasets by Establishment Industry&lt;/a&gt; file, which contains this &lt;a class="reference external" href="https://www2.census.gov/programs-surveys/susb/datasets/2020/us_state_6digitnaics_2020.txt"&gt;raw data&lt;/a&gt;. Save the raw data to a file name &lt;cite&gt;us_state_6digitnaics_2020.txt&lt;/cite&gt; located in &lt;cite&gt;~/code/pandas-1.5&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;At this point we have data and the supporting files we need. If using docker, start up your container with &lt;tt class="docutils literal"&gt;docker run &lt;span class="pre"&gt;--rm&lt;/span&gt; &lt;span class="pre"&gt;-it&lt;/span&gt; &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;${HOME}/code/pandas-1.5:/data&lt;/span&gt; &lt;span class="pre"&gt;-w&lt;/span&gt; /data &lt;span class="pre"&gt;willayd/blog-posts:pandas-callgrind&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-pandas-for-use-with-callgrind"&gt;
&lt;h2 id="building-pandas-for-use-with-callgrind"&gt;Building pandas for use with callgrind&lt;/h2&gt;
&lt;p&gt;In the simplest of use cases, we can follow the &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/version/1.5/development/contributing_environment.html"&gt;standard pandas instructions&lt;/a&gt; for building the library and run it via callgrind to get a high level summary of which &lt;em&gt;functions&lt;/em&gt; are taking the most time. However, we can do better and get &lt;em&gt;line-level&lt;/em&gt; profiling if we compile our C extensions with debugging symbols.&lt;/p&gt;
&lt;p&gt;If you worked through my previous article on &lt;a class="reference external" href="https://willayd.com/fundamental-python-debugging-part-1-python.html"&gt;debugging Python extensions&lt;/a&gt; you would have seen us do this directly via gcc by passing the &lt;cite&gt;-g3&lt;/cite&gt; flag. In our current use case with the pandas code base, we follow their documented instructions for &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/version/1.5/development/debugging_extensions.html"&gt;debugging C extensions in pandas&lt;/a&gt; and instead use a &lt;cite&gt;--with-debugging-symbols&lt;/cite&gt; flag. Both ultimately get us to the same place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@90e75e54ee98:/data#&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;--all
root@90e75e54ee98:/data#&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;build_ext&lt;span class="w"&gt; &lt;/span&gt;--inplace&lt;span class="w"&gt; &lt;/span&gt;-j4&lt;span class="w"&gt; &lt;/span&gt;--with-debugging-symbols
Compiling&lt;span class="w"&gt; &lt;/span&gt;pandas/_libs/algos.pyx&lt;span class="w"&gt; &lt;/span&gt;because&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;changed.
Compiling&lt;span class="w"&gt; &lt;/span&gt;pandas/_libs/arrays.pyx&lt;span class="w"&gt; &lt;/span&gt;because&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;changed.
...
copying&lt;span class="w"&gt; &lt;/span&gt;build/lib.linux-x86_64-cpython-310-pydebug/pandas/_libs/writers.cpython-310d-x86_64-linux-gnu.so&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pandas/_libs
copying&lt;span class="w"&gt; &lt;/span&gt;build/lib.linux-x86_64-cpython-310-pydebug/pandas/io/sas/_sas.cpython-310d-x86_64-linux-gnu.so&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pandas/io/sas
copying&lt;span class="w"&gt; &lt;/span&gt;build/lib.linux-x86_64-cpython-310-pydebug/pandas/_libs/json.cpython-310d-x86_64-linux-gnu.so&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pandas/_libs
root@90e75e54ee98:/data#
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your build should have completed without error. If you run into any issues with the compilation you can try reducing the parallel compilation by removing the &lt;cite&gt;-j4&lt;/cite&gt; flag; this will make your build take longer but should be stable (see &lt;a class="reference external" href="https://github.com/pandas-dev/pandas/issues/47305"&gt;issue #47305&lt;/a&gt; for background information).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="timing-read-csv-with-callgrind"&gt;
&lt;h2 id="timing-read_csv-with-callgrind"&gt;Timing read_csv with callgrind&lt;/h2&gt;
&lt;p&gt;With the build out of the way, we can now run our program under callgrind. To do this execute &lt;tt class="docutils literal"&gt;valgrind &lt;span class="pre"&gt;--tool=callgrind&lt;/span&gt; &lt;span class="pre"&gt;--callgrind-out-file=callgrind.out&lt;/span&gt; python3 &lt;span class="pre"&gt;-c&lt;/span&gt; "import pandas as pd; &lt;span class="pre"&gt;pd.read_csv('us_state_6digitnaics_2020.txt',&lt;/span&gt; &lt;span class="pre"&gt;encoding='cp1252')"&lt;/span&gt;&lt;/tt&gt;. This one command runs our read_csv call while being traced by callgrind, and writes the results of the trace to &lt;cite&gt;callground.out&lt;/cite&gt; for us. Note that this adds some call overhead, so expect execution to be slower than normal.&lt;/p&gt;
&lt;p&gt;By default the output from callgrind is not very readable. Interested readers can peruse the &lt;a class="reference external" href="https://valgrind.org/docs/manual/cl-format.html"&gt;Callgrind Format Specification&lt;/a&gt; for a deeper understanding, but for this article we will use the &lt;cite&gt;callgrind_annotate&lt;/cite&gt; command to inspect the output. This writes to stdout by default, so let's run it to a pager like &lt;cite&gt;less&lt;/cite&gt; via &lt;tt class="docutils literal"&gt;callgrind_annotate callgrind.out | less&lt;/tt&gt;. The contents should look as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--------------------------------------------------------------------------------
Profile&lt;span class="w"&gt; &lt;/span&gt;data&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'callgrind.out'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;creator:&lt;span class="w"&gt; &lt;/span&gt;callgrind-3.18.1&lt;span class="o"&gt;)&lt;/span&gt;
--------------------------------------------------------------------------------
I1&lt;span class="w"&gt; &lt;/span&gt;cache:
D1&lt;span class="w"&gt; &lt;/span&gt;cache:
LL&lt;span class="w"&gt; &lt;/span&gt;cache:
Timerange:&lt;span class="w"&gt; &lt;/span&gt;Basic&lt;span class="w"&gt; &lt;/span&gt;block&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3894679122&lt;/span&gt;
Trigger:&lt;span class="w"&gt; &lt;/span&gt;Program&lt;span class="w"&gt; &lt;/span&gt;termination
Profiled&lt;span class="w"&gt; &lt;/span&gt;target:&lt;span class="w"&gt;  &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;pandas&lt;span class="w"&gt; &lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;pd&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pd.read_csv&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'us_state_6digitnaics_2020.txt'&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'cp1252'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;PID&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;439&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;part&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Events&lt;span class="w"&gt; &lt;/span&gt;recorded:&lt;span class="w"&gt;  &lt;/span&gt;Ir
Events&lt;span class="w"&gt; &lt;/span&gt;shown:&lt;span class="w"&gt;     &lt;/span&gt;Ir
Event&lt;span class="w"&gt; &lt;/span&gt;sort&lt;span class="w"&gt; &lt;/span&gt;order:&lt;span class="w"&gt; &lt;/span&gt;Ir
Thresholds:&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;99&lt;/span&gt;
Include&lt;span class="w"&gt; &lt;/span&gt;dirs:
User&lt;span class="w"&gt; &lt;/span&gt;annotated:
Auto-annotation:&lt;span class="w"&gt;  &lt;/span&gt;on

--------------------------------------------------------------------------------
Ir
--------------------------------------------------------------------------------
&lt;span class="m"&gt;14&lt;/span&gt;,377,625,638&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;.0%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;PROGRAM&lt;span class="w"&gt; &lt;/span&gt;TOTALS

--------------------------------------------------------------------------------
Ir&lt;span class="w"&gt;                      &lt;/span&gt;file:function
--------------------------------------------------------------------------------
&lt;span class="m"&gt;3&lt;/span&gt;,070,417,258&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;.36%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;pandas/_libs/src/parser/tokenizer.c:tokenize_bytes&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/data/pandas/_libs/parsers.cpython-310d-x86_64-linux-gnu.so&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;,156,873,554&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.05%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;/clones/cpython/Objects/unicodeobject.c:_PyUnicode_CheckConsistency&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/usr/local/bin/python3.10&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;,138,167,522&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;.92%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/usr/lib/x86_64-linux-gnu/libc.so.6&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;809&lt;/span&gt;,119,661&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.63%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;/clones/cpython/Objects/unicodeobject.c:charmap_decode_string&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/usr/local/bin/python3.10&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;578&lt;/span&gt;,399,204&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.02%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;pandas/_libs/src/klib/khash.h:__ac_X31_hash_string&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/data/pandas/_libs/parsers.cpython-310d-x86_64-linux-gnu.so&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;551&lt;/span&gt;,577,239&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.84%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;pandas/_libs/src/parser/tokenizer.c:str_to_int64&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/data/pandas/_libs/parsers.cpython-310d-x86_64-linux-gnu.so&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;415&lt;/span&gt;,452,456&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.89%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;pandas/_libs/src/parser/tokenizer.c:end_field&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/data/pandas/_libs/parsers.cpython-310d-x86_64-linux-gnu.so&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;361&lt;/span&gt;,558,111&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.51%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;pandas/_libs/parsers.c:__pyx_f_6pandas_5_libs_7parsers__string_box_utf8&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/data/pandas/_libs/parsers.cpython-310d-x86_64-linux-gnu.so&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;310&lt;/span&gt;,112,056&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.16%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;/clones/cpython/Python/ceval.c:_PyEval_EvalFrameDefault&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;/usr/local/bin/python3.10&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing to note is the total number of &lt;cite&gt;Instructions Read (Ir)&lt;/cite&gt; for the program, which comes out to 14,377,625,638 instructions. Towards the bottom of the above snippet we see the top three function calls are &lt;cite&gt;tokenize_bytes&lt;/cite&gt;, &lt;cite&gt;_PyUnicode_CheckConsistency&lt;/cite&gt;, and &lt;cite&gt;__memset_avx2_unaligned_arms&lt;/cite&gt;. Those are listed at 3,070,417,258 then 1,156,873,554 then 1,138,167,522 instructions in total, respectively. The total instructions in the first column of each of these functions is followed by a relative percentage to the total Ir of the program.&lt;/p&gt;
&lt;p&gt;The main function of interest to us will be the very first one, not only because it represents the largest amount of instructions, but also because it comes directly from our user code. The second function comes from &lt;cite&gt;_PyUnicode_CheckConsistency&lt;/cite&gt; in the CPython standard library, and the third function comes from assembly code bundled with &lt;a class="reference external" href="https://www.gnu.org/software/libc/"&gt;libc&lt;/a&gt;. While we may learn something from diving further into those, we have less control to change them than our user code.&lt;/p&gt;
&lt;p&gt;At this point we know &lt;cite&gt;tokenize_bytes&lt;/cite&gt; is where we spend the most time, but if you look at the source code you will see that it is a pretty big function. So how do we know &lt;em&gt;where&lt;/em&gt; within this function we are spending our time?&lt;/p&gt;
&lt;p&gt;Since we compiled our application with debug symbols, callgrind fortunately gives us &lt;em&gt;line level&lt;/em&gt; profiling information further down in the file. Assuming you paged the &lt;cite&gt;callgrind_annotate&lt;/cite&gt; output to &lt;cite&gt;less&lt;/cite&gt; in the above command, input &lt;tt class="docutils literal"&gt;/tokenize_bytes&lt;/tt&gt; and hit &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; to page through search results until you find the annotated function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;           &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;tokenize_bytes&lt;span class="o"&gt;(&lt;/span&gt;parser_t&lt;span class="w"&gt; &lt;/span&gt;*self,
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,428&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;size_t&lt;span class="w"&gt; &lt;/span&gt;line_limit,&lt;span class="w"&gt; &lt;/span&gt;uint64_t&lt;span class="w"&gt; &lt;/span&gt;start_lines&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;               &lt;/span&gt;int64_t&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;               &lt;/span&gt;uint64_t&lt;span class="w"&gt; &lt;/span&gt;slen&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;               &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;should_skip&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;               &lt;/span&gt;char&lt;span class="w"&gt; &lt;/span&gt;c&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;               &lt;/span&gt;char&lt;span class="w"&gt; &lt;/span&gt;*stream&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,224&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;char&lt;span class="w"&gt; &lt;/span&gt;*buf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;data&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;datapos&lt;span class="p"&gt;;&lt;/span&gt;
.
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,224&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;const&lt;span class="w"&gt; &lt;/span&gt;char&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;lineterminator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;self-&amp;gt;lineterminator&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'\0'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;?
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="s1"&gt;'\n'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;lineterminator&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;               &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;something&lt;span class="w"&gt; &lt;/span&gt;that&lt;span class="w"&gt; &lt;/span&gt;couldn&lt;span class="s1"&gt;'t fit in "char"&lt;/span&gt;
&lt;span class="s1"&gt;            .               // thus comparing a char to it would always be "false"&lt;/span&gt;
&lt;span class="s1"&gt;        1,428 ( 0.00%)      const int carriage_symbol = (self-&amp;gt;lineterminator == '&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;') ? '&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;' : 1000;&lt;/span&gt;
&lt;span class="s1"&gt;          612 ( 0.00%)      const int comment_symbol = (self-&amp;gt;commentchar != '&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s1"&gt;') ?&lt;/span&gt;
&lt;span class="s1"&gt;          612 ( 0.00%)              self-&amp;gt;commentchar : 1000;&lt;/span&gt;
&lt;span class="s1"&gt;          612 ( 0.00%)      const int escape_symbol = (self-&amp;gt;escapechar != '&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;?
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;612&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;self-&amp;gt;escapechar&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,652&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;make_stream_space&lt;span class="o"&gt;(&lt;/span&gt;self,&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;datalen&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;datapos&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;,380,953&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.13%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pandas/_libs/src/parser/tokenizer.c:make_stream_space&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;204x&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;                   &lt;/span&gt;int64_t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bufsize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;                   &lt;/span&gt;self-&amp;gt;error_msg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;malloc&lt;span class="o"&gt;(&lt;/span&gt;bufsize&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;                   &lt;/span&gt;snprintf&lt;span class="o"&gt;(&lt;/span&gt;self-&amp;gt;error_msg,&lt;span class="w"&gt; &lt;/span&gt;bufsize,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"out of memory"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;.
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,224&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;stream&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;stream&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;stream_len&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;612&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.00%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;slen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;self-&amp;gt;stream_len&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above snippet shows that every line in our source file is being annotated, along with the count / total percentage of &lt;cite&gt;Instruction Read&lt;/cite&gt; event counts. You can use the &lt;tt class="docutils literal"&gt;f&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;b&lt;/tt&gt; shortcuts to move forward and backwards through this source code, looking for lines that could be optimized. Paging through the output you will things like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;610&lt;/span&gt;,811,124&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.25%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;switch&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;self-&amp;gt;state&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;.&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;START_FIELD_IN_SKIP_LINE:
&lt;span class="w"&gt;          &lt;/span&gt;.&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;IS_TERMINATOR&lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;.&lt;span class="w"&gt;                               &lt;/span&gt;END_LINE&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;.&lt;span class="w"&gt;                               &lt;/span&gt;self-&amp;gt;state&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ESCAPED_CHAR&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="m"&gt;445&lt;/span&gt;,004,236&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;IS_DELIMITER&lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;.&lt;span class="w"&gt;                               &lt;/span&gt;//&lt;span class="w"&gt; &lt;/span&gt;end&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;field&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;end&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;reached&lt;span class="w"&gt; &lt;/span&gt;yet
&lt;span class="m"&gt;104&lt;/span&gt;,886,583&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.73%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;END_FIELD&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="m"&gt;536&lt;/span&gt;,772,513&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.73%&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pandas/_libs/src/parser/tokenizer.c:end_field&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;,169,799x&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are indicators that the lines &lt;tt class="docutils literal"&gt;switch &lt;span class="pre"&gt;(self-&amp;gt;state)&lt;/span&gt; {&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;{ else if (IS_DELIMITER(c)) {&lt;/tt&gt;, and the expansion of the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;END_FIELD();&lt;/span&gt;&lt;/tt&gt; macro (which inserts calls to &lt;tt class="docutils literal"&gt;end_field&lt;/tt&gt;) take up 4.25%, 3.10% and 3.73% of your application runtime. Much of this has to do with the fact that these functions are invoked very often, so while they may not be &lt;em&gt;slow&lt;/em&gt; in a traditional sense, you as a developer may decide that you need to still find a faster way to implement these.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-go-from-here"&gt;
&lt;h2 id="where-to-go-from-here"&gt;Where to go from here&lt;/h2&gt;
&lt;p&gt;For those interested in a more visual representation of their profile than what &lt;cite&gt;callgrind_annotate&lt;/cite&gt; can offer, the &lt;a class="reference external" href="https://kcachegrind.github.io/html/Home.html"&gt;KCachegrind&lt;/a&gt; tool may prove very useful. Here is what the profile we created above would look like when opened within that tool:&lt;/p&gt;
&lt;img alt="KCachegrind Visualization" src="https://willayd.com/images/KCachegrind_output.jpg"/&gt;
&lt;p&gt;In the real world you will also want to profile a few different input files. We only went over the single US Census source file in this article, but you may be surprised to see different file sizes and contents yield different bottlenecks within your application.&lt;/p&gt;
&lt;p&gt;As a final note, this article showed you how to identify potential bottlenecks within your application, without offering a point of view on how to fix them. In a future article we will dive into using tools like &lt;a class="reference external" href="https://godbolt.org/"&gt;godbolt&lt;/a&gt; or &lt;a class="reference external" href="https://sourceware.org/gdb/"&gt;gdb&lt;/a&gt; to view the assembly generated by our functions, which would be helpful to understand at a low level and yield insights on optimizations we may be able to make.&lt;/p&gt;
&lt;/div&gt;
</content><category term="profiling"></category><category term="python"></category><category term="c"></category></entry></feed>